import request from 'supertest';\nimport express from 'express';\nimport stacRoutes from '../routes/stac.js';\n\nconst app = express();\napp.use(express.json());\napp.use('/api', stacRoutes);\n\ndescribe('STAC API Routes', () => {\n  test('GET /api/catalogs returns catalog list', async () => {\n    const response = await request(app)\n      .get('/api/catalogs')\n      .expect(200);\n    \n    expect(Array.isArray(response.body)).toBe(true);\n    expect(response.body.length).toBeGreaterThan(0);\n    expect(response.body[0]).toHaveProperty('id');\n    expect(response.body[0]).toHaveProperty('name');\n    expect(response.body[0]).toHaveProperty('url');\n  });\n\n  test('GET /api/geocode requires query parameter', async () => {\n    const response = await request(app)\n      .get('/api/geocode')\n      .expect(400);\n    \n    expect(response.body).toHaveProperty('error');\n    expect(response.body.error).toBe('Query parameter required');\n  });\n\n  test('POST /api/search/count returns count', async () => {\n    const searchParams = {\n      bbox: [-180, -90, 180, 90],\n      catalogUrl: 'https://earth-search.aws.element84.com/v1'\n    };\n\n    const response = await request(app)\n      .post('/api/search/count')\n      .send(searchParams)\n      .expect(200);\n    \n    expect(response.body).toHaveProperty('count');\n    expect(typeof response.body.count).toBe('number');\n  });\n});